---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import '../styles/animations.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch {
      console.log('Invalid DB cover image URL: ', database.Cover?.Url)
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch {
    console.log('Invalid DB custom icon URL: ', database.Icon?.Url)
  }
}
---

<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <div class="container">
      <header>
        {
          coverImageURL && (
            <div class="cover">
              <img src={coverImageURL} alt="Site cover image" loading="lazy" />
            </div>
          )
        }
      </header>

      <div>
        <main>
          <div class="content">
            <header>
              <h1>
                <a href={getNavLink('/')}>
                  {
                    database.Icon && database.Icon.Type === 'emoji' ? (
                      <>
                        <span>{database.Icon.Emoji}</span>
                        {database.Title}
                      </>
                    ) : database.Icon && database.Icon.Type === 'external' ? (
                      <>
                        <img src={database.Icon.Url} alt="Site icon image" />
                        {database.Title}
                      </>
                    ) : database.Icon && database.Icon.Type === 'file' ? (
                      <>
                        <img
                          src={customIconURL}
                          class="custom-icon"
                          alt="Site icon image"
                        />
                        {database.Title}
                      </>
                    ) : (
                      database.Title
                    )
                  }
                </a>
              </h1>
              <div class="description">
                {database.Description}
              </div>
            </header>

            <slot name="main" />

            <footer>
              <div>
                <span>Powered by&nbsp;</span>
                <a href="https://github.com/otoyo/astro-notion-blog"
                  >astro-notion-blog</a
                >
              </div>
            </footer>
          </div>
        </main>

        <aside>
          <SearchButton />
          <slot name="aside" />
        </aside>
      </div>
    </div>

    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style>
  .container {
    min-height: 100vh;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .container > div {
    display: flex;
    gap: 40px;
    padding: 40px 0;
  }
  @media (max-width: 1200px) {
    .container {
      padding: 0 15px;
    }
  }
  
  @media (max-width: 1024px) {
    .container > div {
      flex-direction: column;
      gap: 30px;
      padding: 20px 0;
    }
  }
  
  @media (max-width: 768px) {
    .container {
      padding: 0 10px;
    }
    .container > div {
      gap: 20px;
      padding: 15px 0;
    }
  }

  main {
    flex: 1;
    order: 2;
    background: var(--bg-secondary);
    border-radius: var(--radius-xl);
    box-shadow: 0 4px 6px -1px var(--shadow);
    overflow: hidden;
  }
  @media (max-width: 1024px) {
    main {
      order: 1;
    }
  }
  
  @media (max-width: 768px) {
    main {
      border-radius: var(--radius-lg);
    }
  }
  
  @media (max-width: 480px) {
    main {
      border-radius: var(--radius);
    }
  }

  aside {
    order: 1;
    width: 320px;
    background: var(--bg-secondary);
    border-radius: var(--radius-xl);
    box-shadow: 0 4px 6px -1px var(--shadow);
    overflow: hidden;
  }
  @media (max-width: 1024px) {
    aside {
      order: 2;
      width: 100%;
    }
  }
  
  @media (max-width: 768px) {
    aside {
      border-radius: var(--radius-lg);
    }
  }
  
  @media (max-width: 480px) {
    aside {
      border-radius: var(--radius);
    }
  }

  div.cover {
    position: relative;
    overflow: hidden;
  }
  div.cover img {
    display: block;
    width: 100%;
    height: 200px;
    object-fit: cover;
    object-position: center 60%;
    transition: transform 0.3s ease;
  }
  div.cover:hover img {
    transform: scale(1.05);
  }
  
  @media (max-width: 768px) {
    div.cover img {
      height: 150px;
    }
  }
  
  @media (max-width: 480px) {
    div.cover img {
      height: 120px;
    }
  }

  div.content {
    padding: 40px 50px;
  }
  @media (max-width: 768px) {
    div.content {
      padding: 30px 25px;
    }
  }
  @media (max-width: 480px) {
    div.content {
      padding: 20px 15px;
    }
  }

  main header {
    padding: 0 0 30px;
    border-bottom: 1px solid var(--border-light);
    margin-bottom: 30px;
  }
  main header h1 {
    font-weight: 600;
    color: var(--fg);
    font-size: 2.5rem;
    margin-bottom: 10px;
  }
  
  @media (max-width: 768px) {
    main header h1 {
      font-size: 2rem;
    }
  }
  
  @media (max-width: 480px) {
    main header h1 {
      font-size: 1.75rem;
    }
  }
  main header h1 a {
    display: block;
    color: inherit;
    text-decoration: none;
    transition: color 0.2s ease;
  }
  main header h1 a:hover {
    color: var(--accents-1);
  }
  main header h1 a span,
  main header h1 a img {
    display: inline-block;
    font-size: 1.1em;
  }
  main header h1 a span {
    margin-right: 0.3em;
    margin-left: -0.1rem;
  }
  main header h1 a img {
    width: 1.2em;
    height: 1.2em;
    margin-right: 0.2em;
    margin-left: -0.3rem;
    vertical-align: sub;
  }
  main header h1 a img.custom-icon {
    border-radius: var(--radius);
  }

  main header div.description {
    padding: 0;
    font-size: 1.1rem;
    color: var(--fg-secondary);
    line-height: 1.6;
  }

  main footer {
    margin: 40px 0 0;
    padding: 20px 0;
    text-align: center;
    font-size: 0.875rem;
    border-top: 1px solid var(--border-light);
    color: var(--fg-muted);
  }
  @media (max-width: 768px) {
    main footer {
      margin: 30px 0 0;
    }
  }
  main footer span {
    color: var(--fg-muted);
  }
  main footer a {
    color: var(--accents-1);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
  }
  main footer a:hover {
    color: var(--accents-2);
  }
</style>

<style is:global>
  :root {
    --gap-quarter: 0.25rem;
    --gap-half: 0.5rem;
    --gap: 1rem;
    --gap-double: 2rem;

    --bg: #fafafa;
    --bg-secondary: #ffffff;
    --fg: #1a1a1a;
    --fg-secondary: #4a4a4a;
    --fg-muted: #6b7280;
    --accents-1: #3b82f6;
    --accents-2: #6366f1;
    --accents-3: #8b5cf6;
    --geist-foreground: #000;
    --geist-success: #10b981;
    --border: #e5e7eb;
    --border-light: #f3f4f6;
    --shadow: rgba(0, 0, 0, 0.1);
    --shadow-hover: rgba(0, 0, 0, 0.15);

    --radius: 8px;
    --radius-lg: 12px;
    --radius-xl: 16px;

    --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',
      'Helvetica Neue', sans-serif;
    --font-mono: 'JetBrains Mono', SFMono-Regular, Menlo, Consolas, 'PT Mono', 'Liberation Mono',
      Courier, monospace;
  }

  * {
    box-sizing: border-box;
    word-break: break-word;
  }

  html,
  body {
    padding: 0;
    margin: 0;
    font-size: 16px;
  }

  body {
    min-height: 100vh;
    background: linear-gradient(135deg, #fafafa 0%, #f8fafc 100%);
    color: var(--fg);
    font-family: var(--font-sans);
    font-weight: 400;
    line-height: 1.6;

    /* Subtle pattern overlay */
    background-image: 
      radial-gradient(circle at 1px 1px, rgba(0,0,0,0.03) 1px, transparent 0);
    background-size: 20px 20px;

    overflow-x: hidden;

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-text-size-adjust: 100%;
  }

  figure {
    margin: 0;
    font-size: 0.85rem;
    color: #999;
    line-height: 1.8rem;
  }

  a {
    color: var(--accents-1);
    text-decoration: none;
  }
  a:hover {
    color: var(--accents-1);
  }

  mark {
    padding: var(--gap-quarter);
    border-radius: var(--radius);
    background: rgba(247, 212, 255, 0.8);
  }

  h1 {
    margin: 0;
    color: var(--fg);
    font-size: 2.25rem;
    font-weight: 600;
    line-height: 1.2;
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 1.875rem;
    }
  }
  @media (max-width: 480px) {
    h1 {
      font-size: 1.5rem;
    }
  }

  ol {
    color: var(--fg);
    font-weight: 400;
    font-size: 1rem;
    line-height: 1.7;
  }
  p,
  ul {
    color: var(--fg);
    font-weight: 400;
    font-size: 1rem;
    line-height: 1.7;
  }
  ul,
  ol {
    margin: 0;
    padding-inline-start: 1.5rem;
  }
  pre {
    margin: 0;
    white-space: pre;
    tab-size: 2;
  }
  pre :global(code) {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  hr {
    display: block;
    height: 1px;
    border: 0;
    margin: 0.3rem 0;
    background-color: #333;
  }

  code {
    font-size: 0.875rem;
    background: var(--border-light);
    color: var(--accents-3);
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius);
    font-family: var(--font-mono);
    font-weight: 500;
  }

  table {
    display: block;
    overflow-x: auto;
    white-space: nowrap;
    border-collapse: collapse;
  }

  table tr {
    vertical-align: top;
  }

  table th {
    font-weight: 600;
    background-color: var(--border-light);
    color: var(--fg);
  }

  table td,
  table th {
    font-size: 0.9rem;
    border: 1px solid var(--border);
    padding: 0.75rem 1rem;
    text-align: left;
    line-height: 1.4;
  }
  table td::after {
    content: '';
    display: inline-block;
    min-height: 0.9rem;
  }
</style>
